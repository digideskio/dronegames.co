{
  "name": "express-mongoose",
  "description": "Adds Mongoose Promise/Query support to Express rendering.",
  "version": "0.0.5",
  "author": {
    "name": "Aaron Heckmann",
    "email": "aaron@learnboost.com"
  },
  "keywords": [
    "express",
    "mongoose",
    "mongo",
    "render",
    "promise",
    "query"
  ],
  "homepage": "https://github.com/learnboost/express-mongoose",
  "dependencies": {},
  "devDependencies": {
    "should": "0.2.1",
    "mongoose": ">= 1.0.0",
    "express": ">= 2.0.0",
    "jade": ">= 0.20.3",
    "expresso": ">= 0.9.2"
  },
  "main": "index",
  "engines": {
    "node": ">= 0.2.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/LearnBoost/express-mongoose.git"
  },
  "readme": "<img src=\"https://github.com/LearnBoost/express-mongoose/raw/master/express-mongoose.png\"/>\n\nExpress-mongoose adds Mongoose Query and Promise support to Express.\n\nMethods which now support Promises:\n\n   - `res.render`\n   - `res.partial`\n   - `res.send`\n   - `res.redirect`\n\nMethods which now support Queries:\n\n   - `res.render`\n   - `res.partial`\n   - `res.send`\n\n## Installation\n\n    $ npm install express-mongoose\n\n### Example\n\nIn your schemas:\n\n    UserSchema.methods.getLikes = function (callback) {\n      // returns a Query\n      return this.model('Likes').find({ _user: this._id }, callback);\n    };\n\n    NewsSchema.statics.getLatest = function (callback) {\n      var promise = new Promise;\n      if (callback) promise.addBack(callback);\n      this.find({ datePublished: { $gt: new Date(Date.now() - 60000*60) } }, promise.resolve.bind(promise));\n      return promise;\n    };\n\nIn your routes:\n\n    app.get('/dashboard', function (req, res) {\n      var News = db.model('News');\n\n      // render support\n      res.render('dashboard', {\n          likes: req.user.getLikes()\n        , latestNews: News.getLatest()\n        , locals: {\n            backwardcompatible: new Promise(somethingAsync)\n          }\n      });\n    });\n\n    app.get('/partial', function (req, res, next) {\n      res.partial('likes', {\n          likes: req.user.getLikes()\n        , locals: {\n            backwardcompatible: new Promise(somethingAsync)\n          }\n      });\n    });\n\nWith `res.send` support you can pass a Query or Promise and the result will be rendered as json.\nIf an error occurs, the error will be next()ed along as expected.\n\n    app.get('/send', function (req, res) {\n      var News = db.model('News');\n      res.send(News.getLatest());\n    });\n\n    app.get('/promises', function (req, res) {\n      var promise = new Promise(somethingAsync);\n      res.send(promise);\n    });\n\n    app.get('/more', function (req, res) {\n      res.send({\n          promise: new Promise(somethingAsync)\n        , news: req.user.getLatest()\n      });\n    });\n\n`res.redirect` accepts a `Promise` as well.\n\n    app.get('/redirect', function (req, res) {\n      var promise = new Promise;\n      res.redirect(promise);\n\n      process.nextTick(function () {\n        promise.complete(url [, status]);\n        // or\n        promise.error(new Error('uh oh'));\n      });\n    });\n\n### Features\n\n - res.render support\n - res.partial support\n - res.send support\n - res.redirect support\n - nested locals support\n\n### Error handling\n\n If a Query or Promise resolves to an error it will be forwarded on with `next(err)` as expected.\n\n### Compatibility\n\n  - Express: 2.x\n  - Mongoose: 1.x\n\n## Authors\n\n  - [Aaron Heckmann (aheckmann)](http://github.com/aheckmann)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "express-mongoose@0.0.5",
  "_from": "express-mongoose@0.0.x"
}
